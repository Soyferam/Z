window.addEventListener("DOMContentLoaded", () => {
  // ‚úÖ Telegram WebApp
  const tg = window.Telegram?.WebApp;
  if (tg) {
    tg.ready();
    tg.expand();
    tg.requestFullscreen?.();
    document.body.style.overflow = "hidden";
  }

  // ‚úÖ TonConnect UI
  new TON_CONNECT_UI.TonConnectUI({
    manifestUrl: "https://z-ten-iota.vercel.app/tonconnect-manifest.json",
    buttonRootId: "ton-connect",
  });

  // –≠–ª–µ–º–µ–Ω—Ç—ã
  const depositInput = document.getElementById("depositInput");
  const customKeyboard = document.getElementById("customKeyboard");
  const keyboardCloseBtn = document.getElementById("keyboardCloseBtn");
  const playBtn = document.getElementById("playBtn");
  const profitBox = document.getElementById("profitBox");

  // ‚ñ∂Ô∏è –ö–Ω–æ–ø–∫–∞ PLAY
  playBtn.addEventListener("click", () => {
    const amt = parseFloat(depositInput.value);
    if (isNaN(amt) || amt <= 0) {
      alert("Please enter a valid TON amount.");
      return;
    }
    sessionStorage.setItem("depositAmount", amt);
    window.location.href = "game.html";
  });

  // üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é
  document.getElementById("btnGuide").onclick       = () => window.location.href = "guide.html";
  document.getElementById("btnRewards").onclick     = () => alert("Rewards not ready yet");
  document.getElementById("btnLeaderboard").onclick = () => window.location.href = "stats.html";
  document.getElementById("btnWithdraw").onclick    = () => window.location.href = "withdraw.html";
  document.getElementById("btnReferral").onclick    = () => alert("Referral system coming soon");

  // üì§ Share –∫–Ω–æ–ø–∫–∞ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
  const shareBtn = document.getElementById("shareBtn");
  if (shareBtn) {
    shareBtn.addEventListener("click", () => {
      if (navigator.share) {
        navigator.share({
          title: "ZmeiFi Game",
          text: "Check out ZmeiFi ‚Äî awesome TON game!",
          url: location.href,
        }).catch(console.error);
      } else {
        alert("Sharing not supported on this device");
      }
    });
  }

  // üëÄ –°–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –±–ª–æ–∫ –ø—Ä–æ—Ñ–∏—Ç–∞ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
  if (profitBox && depositInput) {
    depositInput.addEventListener("focus", () => {
      profitBox.style.opacity = "0";
      profitBox.style.pointerEvents = "none";
      openKeyboard();
    });

    depositInput.addEventListener("blur", () => {
      setTimeout(() => {
        // –ó–¥–µ—Å—å –Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —Ç.–∫. –æ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫—Ä–µ—Å—Ç–∏–∫–æ–º –∏–ª–∏ Enter
        profitBox.style.opacity = "1";
        profitBox.style.pointerEvents = "auto";
      }, 100);
    });
  }

  // –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  function openKeyboard() {
    if (customKeyboard.classList.contains("hidden")) {
      customKeyboard.classList.remove("hidden");
      customKeyboard.setAttribute("aria-hidden", "false");
    }
  }

  // –ó–∞–∫—Ä—ã—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  function closeKeyboard() {
    if (!customKeyboard.classList.contains("hidden")) {
      customKeyboard.classList.add("hidden");
      customKeyboard.setAttribute("aria-hidden", "true");
      depositInput.blur();
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  let lastClickTime = 0;
  customKeyboard.addEventListener("click", (e) => {
    if (e.target.tagName !== "BUTTON") return;

    const now = Date.now();
    if (now - lastClickTime < 150) {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ –¥–≤–æ–π–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è
      e.preventDefault();
      return;
    }
    lastClickTime = now;

    const key = e.target.dataset.key;
    if (!key) return;

    if (key === "backspace") {
      // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
      depositInput.value = depositInput.value.slice(0, -1);
    } else if (key === "enter") {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Ç—Ä–∏–≥–≥–µ—Ä–∏–º –Ω–∞–∂–∞—Ç–∏–µ playBtn
      closeKeyboard();
      playBtn.click();
    } else if (key === "close") {
      // –ó–∞–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫—Ä–µ—Å—Ç–∏–∫–æ–º
      closeKeyboard();
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—É –∏–ª–∏ —Ç–æ—á–∫—É

      // –õ–æ–≥–∏–∫–∞:  
      // - –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ 1 —Ç–æ—á–∫—É
      // - –ú–∞–∫—Å–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ), –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
      if (key === ".") {
        if (depositInput.value.includes(".")) return;
        if (depositInput.value.length === 0) {
          // –ï—Å–ª–∏ –≤–≤–æ–¥ —Å—Ä–∞–∑—É —Å —Ç–æ—á–∫–∏ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º 0.
          depositInput.value = "0.";
          return;
        }
      }
      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ ‚Äî 10 —Å–∏–º–≤–æ–ª–æ–≤ (—Ü–∏—Ñ—Ä—ã + —Ç–æ—á–∫–∞)
      if (depositInput.value.length >= 10) return;

      // –î–æ–±–∞–≤–ª—è–µ–º
      depositInput.value += key;
    }

    // –§–æ–∫—É—Å –Ω–∞ –∏–Ω–ø—É—Ç, —á—Ç–æ–±—ã –≤–∏–∑—É–∞–ª—å–Ω–æ –≤—Å–µ–≥–¥–∞ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
    depositInput.focus();
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫—Ä–µ—Å—Ç–∏–∫–æ–º
  keyboardCloseBtn.addEventListener("click", () => {
    closeKeyboard();
  });

  // –ü—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∏–Ω–ø—É—Ç—É ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  depositInput.addEventListener("click", () => {
    openKeyboard();
  });

  // –ß—Ç–æ–±—ã –Ω–µ –≤—ã—Å–∫–∞–∫–∏–≤–∞–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –∏–Ω–ø—É—Ç readonly –∏ –∫–∞—Å—Ç–æ–º–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞

});
